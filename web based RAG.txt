import os
import streamlit as st
import requests
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from langchain_community.vectorstores import FAISS
from langchain_community.embeddings import OpenAIEmbeddings
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain.chains import RetrievalQA
from langchain.chat_models import ChatOpenAI

# Load .env file
load_dotenv()

# Set API key (from environment)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    st.error("‚ùå OpenAI API key not found. Please set it in .env or script.")
    st.stop()
os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY

# Step 1: Web Scraper
@st.cache_data(show_spinner=False)
def get_web_content(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    text = ' '.join([p.get_text() for p in soup.find_all('p')])
    return text

# Step 2: Embed Text
def build_vector_store(raw_text):
    splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)
    texts = splitter.create_documents([raw_text])
    embeddings = OpenAIEmbeddings()
    vectorstore = FAISS.from_documents(texts, embeddings)
    return vectorstore

# Step 3: RAG pipeline
def run_rag(query, vectorstore):
    retriever = vectorstore.as_retriever()
    llm = ChatOpenAI(model="gpt-3.5-turbo")
    qa_chain = RetrievalQA.from_chain_type(llm=llm, retriever=retriever)
    return qa_chain.run(query)

# Streamlit UI
st.set_page_config(page_title="Web Search RAG - Chennai History", layout="centered")
st.title("üèõÔ∏è Historical Places in Chennai - RAG App")
st.markdown("Ask questions based on the website: [Universal Adventures](https://www.universaladventures.in/travel-guide/historical-places-in-chennai)")

# Scrape the website
url = "https://www.universaladventures.in/travel-guide/historical-places-in-chennai"
raw_text = get_web_content(url)

if raw_text:
    with st.spinner("üîç Indexing content from the website..."):
        vectorstore = build_vector_store(raw_text)

    user_query = st.text_input("üó£Ô∏è Ask a question about Chennai's historical places:")

    if user_query:
        with st.spinner("ü§ñ Generating response using RAG..."):
            try:
                response = run_rag(user_query, vectorstore)
                st.success(response)
            except Exception as e:
                st.error(f"Error: {e}")
else:
    st.error("Failed to fetch content from the website.")
